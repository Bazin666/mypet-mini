"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("./config");
var util_1 = require("./util");
var conf = config_1.default;
var res = wx.request;
exports.login = function (data, success_function, fail_function) {
    res({
        url: conf.login_url,
        data: data,
        method: "POST",
        header: conf.header,
        success: function (res) {
            var data = res.data;
            if (data.user && data.token) {
                wx.setStorageSync('user_token', data.token);
                wx.setStorageSync('current_user', data.user);
                config_1.default.header.Authorization = data.token;
                config_1.default.header.User = data.user;
                success_function();
            }
            else {
                fail_function();
            }
        }
    });
};
exports.wx_login_api = function (data, success_function, fail_function) {
    if (fail_function === void 0) { fail_function = function () { }; }
    res({
        url: conf.wx_login_url,
        data: data,
        method: "POST",
        header: conf.header,
        success: function (res) {
            var data = res.data;
            if (data.user && data.token) {
                wx.setStorageSync('user_token', data.token);
                wx.setStorageSync('current_user', data.user);
                config_1.default.header.Authorization = data.token;
                config_1.default.header.User = data.user;
                success_function();
            }
            else {
                fail_function();
            }
        }
    });
};
exports.question_add = function (data) {
    res({
        url: conf.question_add_url,
        data: data,
        method: "POST",
        header: conf.header,
        success: function () {
        }
    });
};
exports.question_change = function (data, success_function) {
    res({
        url: conf.question_change_url,
        data: data,
        method: "POST",
        success: function (res) {
            success_function(res);
        }
    });
};
exports.question_list = function (success_function) {
    res({
        url: conf.question_list_url,
        method: "GET",
        header: conf.header,
        data: { userid: util_1.getUserID() },
        success: function (res) {
            if (success_function) {
                success_function(res);
            }
        },
    });
};
exports.question_list_all = function (success_function) {
    res({
        url: conf.question_list_url_all,
        method: "GET",
        header: conf.header,
        success: function (res) {
            if (success_function) {
                success_function(res);
            }
        },
    });
};
exports.question_one = function (data, success_function) {
    res({
        url: conf.question_one,
        method: "GET",
        header: conf.header,
        data: data,
        success: function (res) {
            if (success_function) {
                success_function(res);
            }
        },
    });
};
exports.question_rev = function (data, success_function) {
    res({
        url: conf.question_rev,
        method: "POST",
        header: conf.header,
        data: data,
        success: function (res) {
            if (success_function) {
                success_function(res);
            }
        },
    });
};
exports.question_delete = function (data, success_function) {
    res({
        url: conf.question_delete,
        method: "POST",
        header: conf.header,
        data: data,
        success: function (res) {
            if (success_function) {
                success_function(res);
            }
        },
    });
};
exports.comment_add = function (data, success_function) {
    res({
        url: conf.comment_add,
        data: data,
        method: "POST",
        header: conf.header,
        success: function (res) {
            success_function(res);
        }
    });
};
//# sourceMappingURL=data:application/json;base64,