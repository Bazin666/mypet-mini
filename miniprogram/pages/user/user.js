"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../../utils/util");
Page({
    data: {
        userInfo: {},
        hasUserInfo: false,
        canIUse: wx.canIUse('button.open-type.getUserInfo'),
    },
    bindViewTap: function () {
        wx.navigateTo({
            url: '../logs/logs',
        });
    },
    toLogin: function (e) {
        console.log(e);
        wx.navigateTo({
            url: "../login/login"
        });
    },
    onLoad: function () {
        var _this = this;
        _this.setData({
            userInfo: wx.getStorageSync('userInfo')
        });
        _this.setData({
            hasUserInfo: true
        });
        if (util_1.getUserToken() == null || util_1.getUserToken() == '') {
            wx.navigateTo({
                url: '../login/login'
            });
        }
        var eventChannel = this.getOpenerEventChannel();
        if (eventChannel.on) {
            eventChannel.on('sendUserInfo', function (userinfo) {
                _this.setData({ userInfo: userinfo.data });
                _this.setData({ hasUserInfo: true });
            });
        }
    },
    toquestion: function (e) {
        console.log(e);
        wx.navigateTo({
            url: '../question/question'
        });
    },
    showQuestion: function (e) {
        console.log(e);
        wx.navigateTo({
            url: '../question/showquestion'
        });
    },
    toreg: function () {
        wx.navigateTo({
            url: '../reg/reg'
        });
    },
    onShow: function () {
        if (typeof this.getTabBar === 'function' &&
            this.getTabBar()) {
            this.getTabBar().setData({
                selected: 1
            });
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSx5Q0FBNkM7QUFDN0MsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBYUosUUFBUSxFQUFFLEVBQUU7UUFDWixXQUFXLEVBQUUsS0FBSztRQUNsQixPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztLQUNwRDtJQUVELFdBQVc7UUFDVCxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1osR0FBRyxFQUFFLGNBQWM7U0FDcEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELE9BQU8sWUFBQyxDQUFLO1FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNkLEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDWixHQUFHLEVBQUMsZ0JBQWdCO1NBQ3JCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxNQUFNO1FBQ0osSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ25CLEtBQUssQ0FBQyxPQUFPLENBQUM7WUFDWixRQUFRLEVBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUM7U0FDdkMsQ0FBQyxDQUFBO1FBQ0YsS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUNaLFdBQVcsRUFBQyxJQUFJO1NBQ2pCLENBQUMsQ0FBQTtRQUNGLElBQUcsbUJBQVksRUFBRSxJQUFHLElBQUksSUFBSSxtQkFBWSxFQUFFLElBQUksRUFBRSxFQUFDO1lBQy9DLEVBQUUsQ0FBQyxVQUFVLENBQUM7Z0JBQ1osR0FBRyxFQUFDLGdCQUFnQjthQUNyQixDQUFDLENBQUE7U0FDSDtRQTRCRCxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQTtRQUNqRCxJQUFHLFlBQVksQ0FBQyxFQUFFLEVBQUM7WUFDakIsWUFBWSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsVUFBUyxRQUFRO2dCQUMvQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUMsUUFBUSxFQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFBO2dCQUN2QyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUMsV0FBVyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUE7WUFDbkMsQ0FBQyxDQUFDLENBQUE7U0FDSDtJQUNILENBQUM7SUFXRCxVQUFVLFlBQUMsQ0FBSztRQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDZCxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1osR0FBRyxFQUFDLHNCQUFzQjtTQUMzQixDQUFDLENBQUE7SUFDSixDQUFDO0lBQ0QsWUFBWSxZQUFDLENBQUs7UUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNkLEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDWixHQUFHLEVBQUMsMEJBQTBCO1NBQy9CLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxLQUFLO1FBQ0gsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBQyxZQUFZO1NBQ2pCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxNQUFNO1FBQ0osSUFBSSxPQUFPLElBQUksQ0FBQyxTQUFTLEtBQUssVUFBVTtZQUNwQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQztnQkFDdkIsUUFBUSxFQUFFLENBQUM7YUFDWixDQUFDLENBQUE7U0FDSDtJQUNMLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbmRleC50c1xyXG4vLyDojrflj5blupTnlKjlrp7kvotcclxuLy8gY29uc3QgYXBwID0gZ2V0QXBwPElBcHBPcHRpb24+KClcclxuaW1wb3J0IHtnZXRVc2VyVG9rZW59IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnXHJcblBhZ2Uoe1xyXG4gIGRhdGE6IHtcclxuICAvLyAgIGxpc3Q6IFt7XHJcbiAgLy8gICAgIFwidGV4dFwiOiBcInNob3V5ZVwiLFxyXG4gIC8vICAgICBcImljb25QYXRoXCI6IFwiLi8uLi8uLi9zdGF0aWMvaW1nL3Nob3V5ZS5wbmdcIixcclxuICAvLyAgICAgXCJzZWxlY3RlZEljb25QYXRoXCI6IFwiLi4vLi4vc3RhdGljL2ltZy9zaG91eWUucG5nXCIsXHJcbiAgLy8gICAgIGRvdDogdHJ1ZVxyXG4gIC8vIH0sXHJcbiAgLy8ge1xyXG4gIC8vICAgXCJ0ZXh0XCI6IFwieW9uZ2h1emhvbmd4aW5cIixcclxuICAvLyAgIFwiaWNvblBhdGhcIjogXCIuLi8uLi9zdGF0aWMvaW1nL3lvbmdodS5wbmdcIixcclxuICAvLyAgIFwic2VsZWN0ZWRJY29uUGF0aFwiOiBcIi4uLy4uL3N0YXRpYy9pbWcveW9uZ2h1LnBuZ1wiLFxyXG4gIC8vICAgICBiYWRnZTogJ05ldydcclxuICAvLyB9XSxcclxuICAgIHVzZXJJbmZvOiB7fSxcclxuICAgIGhhc1VzZXJJbmZvOiBmYWxzZSxcclxuICAgIGNhbklVc2U6IHd4LmNhbklVc2UoJ2J1dHRvbi5vcGVuLXR5cGUuZ2V0VXNlckluZm8nKSxcclxuICB9LFxyXG4gIC8vIOS6i+S7tuWkhOeQhuWHveaVsFxyXG4gIGJpbmRWaWV3VGFwKCkge1xyXG4gICAgd3gubmF2aWdhdGVUbyh7XHJcbiAgICAgIHVybDogJy4uL2xvZ3MvbG9ncycsXHJcbiAgICB9KVxyXG4gIH0sXHJcbiAgdG9Mb2dpbihlOmFueSl7XHJcbiAgICBjb25zb2xlLmxvZyhlKVxyXG4gICAgd3gubmF2aWdhdGVUbyh7XHJcbiAgICAgIHVybDpcIi4uL2xvZ2luL2xvZ2luXCJcclxuICAgIH0pXHJcbiAgfSxcclxuICBvbkxvYWQoKSB7XHJcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XHJcbiAgICBfdGhpcy5zZXREYXRhKHtcclxuICAgICAgdXNlckluZm86d3guZ2V0U3RvcmFnZVN5bmMoJ3VzZXJJbmZvJylcclxuICAgIH0pXHJcbiAgICBfdGhpcy5zZXREYXRhKHtcclxuICAgICAgaGFzVXNlckluZm86dHJ1ZVxyXG4gICAgfSlcclxuICAgIGlmKGdldFVzZXJUb2tlbigpID09bnVsbCB8fCBnZXRVc2VyVG9rZW4oKSA9PSAnJyl7XHJcbiAgICAgIHd4Lm5hdmlnYXRlVG8oe1xyXG4gICAgICAgIHVybDonLi4vbG9naW4vbG9naW4nXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIGlmIChhcHAuZ2xvYmFsRGF0YS51c2VySW5mbykge1xyXG4gICAgLy8gICB0aGlzLnNldERhdGEoe1xyXG4gICAgLy8gICAgIHVzZXJJbmZvOiBhcHAuZ2xvYmFsRGF0YS51c2VySW5mbyxcclxuICAgIC8vICAgICBoYXNVc2VySW5mbzogdHJ1ZSxcclxuICAgIC8vICAgfSlcclxuICAgIC8vIH0gZWxzZSBpZiAodGhpcy5kYXRhLmNhbklVc2UpIHtcclxuICAgIC8vICAgLy8g55Sx5LqOIGdldFVzZXJJbmZvIOaYr+e9kee7nOivt+axgu+8jOWPr+iDveS8muWcqCBQYWdlLm9uTG9hZCDkuYvlkI7miY3ov5Tlm55cclxuICAgIC8vICAgLy8g5omA5Lul5q2k5aSE5Yqg5YWlIGNhbGxiYWNrIOS7pemYsuatoui/meenjeaDheWGtVxyXG4gICAgLy8gICBhcHAudXNlckluZm9SZWFkeUNhbGxiYWNrID0gcmVzID0+IHtcclxuICAgIC8vICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgLy8gICAgICAgdXNlckluZm86IHJlcy51c2VySW5mbyxcclxuICAgIC8vICAgICAgIGhhc1VzZXJJbmZvOiB0cnVlLFxyXG4gICAgLy8gICAgIH0pXHJcbiAgICAvLyAgIH1cclxuICAgIC8vIH0gZWxzZSB7XHJcbiAgICAvLyAgIC8vIOWcqOayoeaciSBvcGVuLXR5cGU9Z2V0VXNlckluZm8g54mI5pys55qE5YW85a655aSE55CGXHJcbiAgICAvLyAgIHd4LmdldFVzZXJJbmZvKHtcclxuICAgIC8vICAgICBzdWNjZXNzOiByZXMgPT4ge1xyXG4gICAgLy8gICAgICAgYXBwLmdsb2JhbERhdGEudXNlckluZm8gPSByZXMudXNlckluZm9cclxuICAgIC8vICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAvLyAgICAgICAgIHVzZXJJbmZvOiByZXMudXNlckluZm8sXHJcbiAgICAvLyAgICAgICAgIGhhc1VzZXJJbmZvOiB0cnVlLFxyXG4gICAgLy8gICAgICAgfSlcclxuICAgIC8vICAgICB9LFxyXG4gICAgLy8gICB9KVxyXG4gICAgLy8gfVxyXG4gICAgY29uc3QgZXZlbnRDaGFubmVsID0gdGhpcy5nZXRPcGVuZXJFdmVudENoYW5uZWwoKVxyXG4gICAgaWYoZXZlbnRDaGFubmVsLm9uKXtcclxuICAgICAgZXZlbnRDaGFubmVsLm9uKCdzZW5kVXNlckluZm8nLCBmdW5jdGlvbih1c2VyaW5mbykge1xyXG4gICAgICAgIF90aGlzLnNldERhdGEoe3VzZXJJbmZvOnVzZXJpbmZvLmRhdGF9KVxyXG4gICAgICAgIF90aGlzLnNldERhdGEoe2hhc1VzZXJJbmZvOnRydWV9KVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgLy8gZ2V0VXNlckluZm8oZTogYW55KSB7XHJcbiAgLy8gICBjb25zb2xlLmxvZyhlKVxyXG4gIC8vICAgYXBwLmdsb2JhbERhdGEudXNlckluZm8gPSBlLmRldGFpbC51c2VySW5mb1xyXG4gIC8vICAgdGhpcy5zZXREYXRhKHtcclxuICAvLyAgICAgdXNlckluZm86IGUuZGV0YWlsLnVzZXJJbmZvLFxyXG4gIC8vICAgICBoYXNVc2VySW5mbzogdHJ1ZSxcclxuICAvLyAgIH0pXHJcbiAgLy8gfSxcclxuXHJcbiAgLy9cclxuICB0b3F1ZXN0aW9uKGU6YW55KXtcclxuICAgIGNvbnNvbGUubG9nKGUpXHJcbiAgICB3eC5uYXZpZ2F0ZVRvKHtcclxuICAgICAgdXJsOicuLi9xdWVzdGlvbi9xdWVzdGlvbidcclxuICAgIH0pXHJcbiAgfSxcclxuICBzaG93UXVlc3Rpb24oZTphbnkpe1xyXG4gICAgY29uc29sZS5sb2coZSlcclxuICAgIHd4Lm5hdmlnYXRlVG8oe1xyXG4gICAgICB1cmw6Jy4uL3F1ZXN0aW9uL3Nob3dxdWVzdGlvbidcclxuICAgIH0pXHJcbiAgfVxyXG4gICxcclxuICB0b3JlZygpe1xyXG4gICAgd3gubmF2aWdhdGVUbyh7XHJcbiAgICAgIHVybDonLi4vcmVnL3JlZydcclxuICAgIH0pXHJcbiAgfSxcclxuICBvblNob3coKXtcclxuICAgIGlmICh0eXBlb2YgdGhpcy5nZXRUYWJCYXIgPT09ICdmdW5jdGlvbicgJiZcclxuICAgICAgICB0aGlzLmdldFRhYkJhcigpKSB7XHJcbiAgICAgICAgdGhpcy5nZXRUYWJCYXIoKS5zZXREYXRhKHtcclxuICAgICAgICAgIHNlbGVjdGVkOiAxXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gIH1cclxufSkiXX0=