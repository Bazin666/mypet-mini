"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var api_1 = require("../../utils/api");
Page({
    onLoad: function () {
    },
    data: {
        username: '',
        password: '',
        res_msg: '',
        buttons: [{ text: 'OK' }],
        is_show_dialog: false,
        login_state: "",
        user_data: '',
    },
    formSubmit: function (e) {
        var _this = this;
        var info = e.detail.value;
        api_1.login(info, function () {
            _this.setData({ res_msg: '登陆成功' });
            _this.setData({ login_state: 'success_login' });
            _this.showMsg();
            console.log('show');
        }, function () {
            _this.setData({ login_state: 'fail_login' });
            _this.setData({ res_msg: '登陆失败' });
            _this.showMsg();
        });
    },
    formReset: function (e) {
        console.log(e);
        this.setData({
            username: '',
            password: ''
        });
    },
    showMsg: function () {
        var _this = this;
        _this.setData({ is_show_dialog: true });
    },
    success_login: function () {
        wx.navigateTo({
            url: "../index/index"
        });
    },
    fail_login: function () {
        this.setData({
            is_show_dialog: false,
        });
    },
    wx_login: function () {
        wx.login({
            success: function (res) {
                console.log(res);
                api_1.wx_login_api({ code: res.code }, function () { console.log("wx_login"); });
            }
        });
    },
    wx_getuserinfo: function (e) {
        var _this = this;
        var userdetail = JSON.stringify(e.detail);
        wx.login({
            success: function (res) {
                var info = { code: res.code, userinfo: userdetail };
                api_1.wx_login_api(info, function () {
                    _this.setData({ res_msg: '登陆成功' });
                    _this.setData({ login_state: 'success_login' });
                    _this.showMsg();
                });
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2dpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFtRDtBQUVuRCxJQUFJLENBQUM7SUFDRCxNQUFNO0lBRU4sQ0FBQztJQUNELElBQUksRUFBQztRQUNELFFBQVEsRUFBQyxFQUFFO1FBQ1gsUUFBUSxFQUFDLEVBQUU7UUFDWCxPQUFPLEVBQUMsRUFBRTtRQUNWLE9BQU8sRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLElBQUksRUFBQyxDQUFDO1FBQ3JCLGNBQWMsRUFBQyxLQUFLO1FBQ3BCLFdBQVcsRUFBQyxFQUFFO1FBQ2QsU0FBUyxFQUFDLEVBQUU7S0FDZjtJQUNELFVBQVUsWUFBQyxDQUFNO1FBQ2IsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFBO1FBQ3pCLFdBQUssQ0FBQyxJQUFJLEVBQUM7WUFDUCxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUMsT0FBTyxFQUFDLE1BQU0sRUFBQyxDQUFDLENBQUE7WUFDL0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFDLFdBQVcsRUFBQyxlQUFlLEVBQUMsQ0FBQyxDQUFBO1lBQzVDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQTtZQUVmLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDdkIsQ0FBQyxFQUFDO1lBQ0UsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFDLFdBQVcsRUFBQyxZQUFZLEVBQUMsQ0FBQyxDQUFBO1lBQ3pDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBQyxPQUFPLEVBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQTtZQUMvQixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDbkIsQ0FBQyxDQUFDLENBQUE7SUFFTixDQUFDO0lBQ0QsU0FBUyxZQUFDLENBQUs7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNULFFBQVEsRUFBQyxFQUFFO1lBQ1gsUUFBUSxFQUFDLEVBQUU7U0FDZCxDQUFDLENBQUE7SUFDTixDQUFDO0lBQ0QsT0FBTztRQUNILElBQUksS0FBSyxHQUFHLElBQUksQ0FBQTtRQUNoQixLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUMsY0FBYyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUE7SUFFeEMsQ0FBQztJQUNELGFBQWE7UUFDVCxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1YsR0FBRyxFQUFDLGdCQUFnQjtTQUN2QixDQUFDLENBQUE7SUFDTixDQUFDO0lBQ0QsVUFBVTtRQUNOLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDVCxjQUFjLEVBQUMsS0FBSztTQUN2QixDQUFDLENBQUE7SUFDTixDQUFDO0lBQ0QsUUFBUTtRQUNKLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDTCxPQUFPLFlBQUMsR0FBRztnQkFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO2dCQUNoQixrQkFBWSxDQUFDLEVBQUMsSUFBSSxFQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUMsRUFBQyxjQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQTtZQUMvRCxDQUFDO1NBQ0osQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUNELGNBQWMsWUFBQyxDQUFLO1FBQ2hCLElBQUksS0FBSyxHQUFJLElBQUksQ0FBQTtRQUNqQixJQUFJLFVBQVUsR0FBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN4QyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ0wsT0FBTyxZQUFDLEdBQUc7Z0JBQ1AsSUFBSSxJQUFJLEdBQUcsRUFBQyxJQUFJLEVBQUMsR0FBRyxDQUFDLElBQUksRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLENBQUE7Z0JBQzlDLGtCQUFZLENBQUMsSUFBSSxFQUFDO29CQUNWLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBQyxPQUFPLEVBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQTtvQkFDL0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFDLFdBQVcsRUFBQyxlQUFlLEVBQUMsQ0FBQyxDQUFBO29CQUM1QyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUE7Z0JBQUEsQ0FBQyxDQUFDLENBQUE7WUFDN0IsQ0FBQztTQUNKLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FDSixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2xvZ2luLCB3eF9sb2dpbl9hcGl9IGZyb20gJy4uLy4uL3V0aWxzL2FwaSdcclxuXHJcblBhZ2Uoe1xyXG4gICAgb25Mb2FkKCl7XHJcblxyXG4gICAgfSxcclxuICAgIGRhdGE6e1xyXG4gICAgICAgIHVzZXJuYW1lOicnLFxyXG4gICAgICAgIHBhc3N3b3JkOicnLFxyXG4gICAgICAgIHJlc19tc2c6JycsXHJcbiAgICAgICAgYnV0dG9uczpbe3RleHQ6J09LJ31dLFxyXG4gICAgICAgIGlzX3Nob3dfZGlhbG9nOmZhbHNlLFxyXG4gICAgICAgIGxvZ2luX3N0YXRlOlwiXCIsXHJcbiAgICAgICAgdXNlcl9kYXRhOicnLFxyXG4gICAgfSxcclxuICAgIGZvcm1TdWJtaXQoZTogYW55KXtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBpbmZvID0gZS5kZXRhaWwudmFsdWVcclxuICAgICAgICBsb2dpbihpbmZvLCgpPT57XHJcbiAgICAgICAgICAgIF90aGlzLnNldERhdGEoe3Jlc19tc2c6J+eZu+mZhuaIkOWKnyd9KVxyXG4gICAgICAgICAgICBfdGhpcy5zZXREYXRhKHtsb2dpbl9zdGF0ZTonc3VjY2Vzc19sb2dpbid9KVxyXG4gICAgICAgICAgICBfdGhpcy5zaG93TXNnKClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzaG93JylcclxuICAgICAgICB9LCgpID0+IHtcclxuICAgICAgICAgICAgX3RoaXMuc2V0RGF0YSh7bG9naW5fc3RhdGU6J2ZhaWxfbG9naW4nfSlcclxuICAgICAgICAgICAgX3RoaXMuc2V0RGF0YSh7cmVzX21zZzon55m76ZmG5aSx6LSlJ30pXHJcbiAgICAgICAgICAgIF90aGlzLnNob3dNc2coKVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgfSxcclxuICAgIGZvcm1SZXNldChlOmFueSl7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSlcclxuICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICB1c2VybmFtZTonJyxcclxuICAgICAgICAgICAgcGFzc3dvcmQ6JydcclxuICAgICAgICB9KVxyXG4gICAgfSxcclxuICAgIHNob3dNc2coKXtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzXHJcbiAgICAgICAgX3RoaXMuc2V0RGF0YSh7aXNfc2hvd19kaWFsb2c6dHJ1ZX0pXHJcblxyXG4gICAgfSxcclxuICAgIHN1Y2Nlc3NfbG9naW4oKXtcclxuICAgICAgICB3eC5uYXZpZ2F0ZVRvKHtcclxuICAgICAgICAgICAgdXJsOlwiLi4vaW5kZXgvaW5kZXhcIlxyXG4gICAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgZmFpbF9sb2dpbigpe1xyXG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgIGlzX3Nob3dfZGlhbG9nOmZhbHNlLFxyXG4gICAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgd3hfbG9naW4oKXtcclxuICAgICAgICB3eC5sb2dpbih7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3MocmVzKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcylcclxuICAgICAgICAgICAgICAgIHd4X2xvZ2luX2FwaSh7Y29kZTpyZXMuY29kZX0sKCk9Pntjb25zb2xlLmxvZyhcInd4X2xvZ2luXCIpfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgd3hfZ2V0dXNlcmluZm8oZTphbnkpe1xyXG4gICAgICAgIHZhciBfdGhpcyAgPSB0aGlzXHJcbiAgICAgICAgdmFyIHVzZXJkZXRhaWw9IEpTT04uc3RyaW5naWZ5KGUuZGV0YWlsKVxyXG4gICAgICAgIHd4LmxvZ2luKHtcclxuICAgICAgICAgICAgc3VjY2VzcyhyZXMpe1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZm8gPSB7Y29kZTpyZXMuY29kZSx1c2VyaW5mbzp1c2VyZGV0YWlsfVxyXG4gICAgICAgICAgICAgICAgd3hfbG9naW5fYXBpKGluZm8sKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0RGF0YSh7cmVzX21zZzon55m76ZmG5oiQ5YqfJ30pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNldERhdGEoe2xvZ2luX3N0YXRlOidzdWNjZXNzX2xvZ2luJ30pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNob3dNc2coKX0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59KSJdfQ==